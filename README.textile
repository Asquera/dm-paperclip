h1. DataMapper Paperclip

DM-Paperclip is a port of Thoughtbot's Paperclip plugin to work with DataMapper 0.9.  This plugin is fully compatible with
the original ActiveRecord-oriented Paperclip.  You could take an existing ActiveRecord database and use it with DataMapper.
The module also includes updates validation handling and automatic including of the necessary 'property' fields into
your model.

To use it within your models, you need to ensure the three database fields are included.  They are {name}_file_name,
{name}_content_type, and {name}_file_size.  The first two are strings, the final _file_size column is an integer. So
if your user model has an avatar field, then you would add avatar_file_name, avatar_content_type, and avatar_file_size.

As with the original Paperclip plugin, it allows processing of thumbnails at the time the record is saved though ImageMagick.
It processes the thumbnails through the command-line applications instead of using RMagick.

See the documentation for the +has_attached_file+ method for options.

h2. Usage

In your model:

  class User
    include DataMapper::Resource
    include Paperclip::Resource
    property :id, Integer, :serial => true
    property :username, String
    has_attached_file :avatar,
                      :styles => { :medium => "300x300>",
                                   :thumb => "100x100>" }
  end

Your database will need to add three columns, +avatar_file_name+ (varchar), +avatar_content_type+ (varchar), and
+avatar_file_size+ (integer).  You can either add these manually, auto-migrate, or use the following migration:

  migration( 1, :add_user_paperclip_fields ) do
  up do
      modify_table :users do
        add_column :avatar_file_name, "varchar(255)"
        add_column :avatar_content_type, "varchar(255)"
        add_column :avatar_file_size, "integer"
      end
    end
    down do
      modify_table :users do
        drop_columns :avatar_file_name, :avatar_content_type, :avatar_file_size
      end
    end
  end

In your edit and new views:

  <% form_for @user, { :action => url(:user), :multipart => true } do %>
    <%= file_field :name => 'avatar' %>
  <% end %>

In your controller:

  def create
    ...
    @user.avatar = params[:avatar]
  end

In your show view:

  <%= image_tag @user.avatar.url %>
  <%= image_tag @user.avatar.url(:medium) %>
  <%= image_tag @user.avatar.url(:thumb) %>

The following validations are available:

  validates_attachment_presence :avatar
  validates_attachment_content_type :avatar, :content_type => "image/png"
  validates_attachment_size :avatar, :in => 1..10240
  validates_attachment_thumbnails :avatar